// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  following     Follow[]  @relation("Following")
  followedBy    Follow[]  @relation("FollowedBy")
}

model Post {
  id         String   @id @unique @default(cuid())
  title      String?
  content    String?
  coverImage String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  comments   Comment[]
}

model Comment {
  id        String    @id @unique @default(cuid())
  content   String?
  createdAt DateTime  @default(now())
  userId    String
  postId    String
  user      User      @relation(fields: [userId], references: [id])
  post      Post      @relation(fields: [postId], references: [id])
}

model Follow {
  id           String    @id @default(cuid())
  followerId   String
  followingId  String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())

  follower     User      @relation(name: "Following", fields: [followerId], references: [id])
  following    User      @relation(name: "FollowedBy", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}